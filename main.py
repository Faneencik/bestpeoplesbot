import os
import logging
import asyncio
import signal
from datetime import datetime
from collections import defaultdict
from telegram import Update, InputFile, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="[%(asctime)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CREATOR_CHAT_ID = int(os.getenv("CREATOR_CHAT_ID"))
ALLOWED_USERS = {CREATOR_CHAT_ID, 6811659941}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
media_groups = defaultdict(list)
media_group_info = {}

# –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
shutdown_flag = False

async def process_media_group(media_group_id, context):
    await asyncio.sleep(3)
    if media_group_id in media_groups and media_group_id in media_group_info:
        media_list = media_groups.pop(media_group_id)
        username, first_message = media_group_info.pop(media_group_id)
        
        if media_list:
            if first_message.caption:
                media_list[0] = type(media_list[0])(
                    media=media_list[0].media,
                    caption=first_message.caption,
                )
            await context.bot.send_message(
                chat_id=CREATOR_CHAT_ID,
                text=f"–ê–ª—å–±–æ–º –∏–∑ {len(media_list)} –º–µ–¥–∏–∞ –æ—Ç @{username}",
            )
            await context.bot.send_media_group(
                chat_id=CREATOR_CHAT_ID,
                media=media_list,
            )
            await first_message.reply_text(
                f"–ê–ª—å–±–æ–º –∏–∑ {len(media_list)} –º–µ–¥–∏–∞ –ø–æ–ª—É—á–µ–Ω! –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
            )

async def forward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if shutdown_flag:
        return
    try:
        message = update.message
        if not message:
            return

        username = message.from_user.username or message.from_user.id

        if message.text and message.text.strip() == "/start":
            await message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
        if hasattr(message, "media_group_id") and message.media_group_id:
            media_group_id = message.media_group_id
            if message.photo:
                media = InputMediaPhoto(media=message.photo[-1].file_id)
            elif message.video:
                media = InputMediaVideo(media=message.video.file_id)
            else:
                return

            if media_group_id not in media_groups:
                media_group_info[media_group_id] = (username, message)
            media_groups[media_group_id].append(media)

            if hasattr(context, "_media_group_timer"):
                context._media_group_timer.cancel()
            context._media_group_timer = asyncio.create_task(
                process_media_group(media_group_id, context)
            )
            return

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...
        # (–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –∑–¥–µ—Å—å)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id not in ALLOWED_USERS:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            return
        log_filename = f"log_{datetime.now().strftime('%Y-%m-%d')}.txt"
        if os.path.exists(log_filename):
            with open(log_filename, "rb") as log_file:
                await update.message.reply_document(
                    document=InputFile(log_file),
                    filename=log_filename,
                )
        else:
            await update.message.reply_text("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {e}", exc_info=True)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("–û—à–∏–±–∫–∞:", exc_info=context.error)
    if update and isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_shutdown(signum, frame):
    global shutdown_flag
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    shutdown_flag = True

if __name__ == "__main__":
    signal.signal(signal.SIGINT, handle_shutdown)
    signal.signal(signal.SIGTERM, handle_shutdown)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("log", send_log))
    app.add_handler(MessageHandler(filters.ALL, forward))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling üöÄ")
    
    try:
        app.run_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            close_loop=False,          # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç event loop –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            stop_signals=[],           # –ú—ã —Å–∞–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
